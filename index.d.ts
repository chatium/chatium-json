// Generated by dts-bundle-generator v5.6.0

export interface ApiCallAction<P = unknown> extends ApiCallOptions {
	type: "apiCall";
	url: string;
	apiParams: P;
}
export interface ApiCallOptions {
	confirm?: string;
	sendPlayerState?: {
		playerId: string;
		apiParamsKey: string;
	};
}
export declare function apiCall<P>(url: string, apiParams: P, options?: ApiCallOptions): ApiCallAction<P>;
export declare enum MediaType {
	Any = "any",
	Photo = "photo",
	Video = "video",
	None = "none"
}
export interface AttachMediaAction {
	type: "attachMedia";
	menuTitle?: string;
	progressTitle?: string;
	multiple?: boolean;
	mediaType?: MediaType;
	filePutUrl: string;
	submitUrl: string;
	file?: {
		type: MobileFileTypeGroup | MobileFileTypeGroup[];
	};
}
export declare type MobileFileTypeGroup = "allFiles" | "audio" | "csv" | "images" | "plainText" | "pdf" | "video" | "zip";
export declare function attachMedia(filePutUrl: string, props: Omit<AttachMediaAction, "type" | "filePutUrl">): AttachMediaAction;
export interface ConfirmEmailAction {
	type: "confirmEmail";
}
export declare function confirmEmail(): ConfirmEmailAction;
export interface ConfirmPhoneAction {
	type: "confirmPhone";
}
export declare function confirmPhone(): ConfirmPhoneAction;
export interface CopyToClipboardAction {
	type: "copyToClipboard";
	value: string;
}
export declare function copyToClipboard(value: string): CopyToClipboardAction;
export interface GoBackAction {
	type: "goBack";
}
export declare function goBack(): GoBackAction;
export interface NavigateAction {
	type: "navigate";
	url: string;
	replace?: boolean;
	openInExternalApp?: boolean;
	openInModalScreen?: boolean;
	fullScreenModal?: boolean;
	openInCurrentScreen?: boolean;
	openInBrowser?: boolean;
	resetStack?: true;
}
export declare function navigate(url: string, options?: Omit<NavigateAction, "type" | "url">): NavigateAction;
export interface AudioProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	title?: string;
	description?: string;
	downloadUrl: string;
	fileHash: string | null;
	durationSeconds?: number;
}
export interface AudioBlock<ExtraBlocks, ExtraActions> extends AudioProps<ExtraBlocks, ExtraActions> {
	type: "audio";
}
export declare function Audio<ExtraBlocks, ExtraActions>(props: AudioProps<ExtraBlocks, ExtraActions>): AudioBlock<ExtraBlocks, ExtraActions>;
export interface ButtonProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	bgColor?: Color;
	fontColor?: Color;
	fontSize?: FontSize;
	icon?: Icon;
	iconPosition?: "left" | "right";
	onClick?: ChatiumActions<ExtraActions>;
	title?: string;
	buttonType?: "primary" | "transparent" | "headerRight" | "headerLeft" | "warning" | "warningTransparent" | "flat";
}
export interface ButtonBlock<ExtraBlocks, ExtraActions> extends ButtonProps<ExtraBlocks, ExtraActions> {
	type: "button";
}
export declare function Button<ExtraBlocks, ExtraActions>(props: ButtonProps<ExtraBlocks, ExtraActions>): ButtonBlock<ExtraBlocks, ExtraActions>;
export declare function flattenChildren<ExtraBlocks, ExtraActions>(children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): Promise<ChatiumBlock<ExtraBlocks, ExtraActions>[]>;
export declare type ChatiumChildNode<ExtraBlocks, ExtraActions> = SyncNode<ExtraBlocks, ExtraActions> | Promise<SyncNode<ExtraBlocks, ExtraActions>>;
export declare type SyncNode<ExtraBlocks, ExtraActions> = SingleNode<ExtraBlocks, ExtraActions> | SingleNode<ExtraBlocks, ExtraActions>[];
export declare type SingleNode<ExtraBlocks, ExtraActions> = ChatiumBlock<ExtraBlocks, ExtraActions> | null | undefined | false | 0 | "";
export interface FooterProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	blocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[];
	visibleAlways?: boolean;
}
export interface FooterBlock<ExtraBlocks, ExtraActions> extends FooterProps<ExtraBlocks, ExtraActions> {
	type: "footer";
}
export declare function Footer<ExtraBlocks, ExtraActions>(props: FooterProps<ExtraBlocks, ExtraActions>, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): Promise<FooterBlock<ExtraBlocks, ExtraActions>>;
export declare type GalleryBlock<ExtraBlocks, ExtraActions> = GalleryProps<ExtraBlocks, ExtraActions> & {
	type: "gallery";
};
export declare type GalleryProps<ExtraBlocks, ExtraActions> = {
	onClick?: ChatiumActions<ExtraActions>;
	initialSlideIndex?: number;
	slides?: Array<{
		content?: ChatiumBlock<ExtraBlocks, ExtraActions>;
	} | {
		blocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[];
	}>;
} & CommonBlockProps<ExtraBlocks, ExtraActions>;
export declare function Gallery<ExtraBlocks, ExtraActions>(props: GalleryProps<ExtraBlocks, ExtraActions>, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): Promise<GalleryBlock<ExtraBlocks, ExtraActions>>;
export declare type TextBlock<ExtraBlocks, ExtraActions> = TextProps<ExtraBlocks, ExtraActions> & {
	type: "text";
	blocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[];
};
export declare type TextStyle = {
	color?: Color;
	fontSize?: FontSize;
	styles?: FontStyle | FontStyle[];
	isBold?: boolean;
	lineHeight?: number;
};
export declare type TextProps<ExtraBlocks, ExtraActions> = {
	onClick?: ChatiumActions<ExtraActions>;
} & TextContent<ExtraActions> & CommonBlockProps<ExtraBlocks, ExtraActions> & TextStyle;
export declare type TextContent<ExtraActions> = {
	text: string;
	tokens?: never;
} | {
	tokens: TextToken<ExtraActions>[];
	text?: never;
};
export declare type TextToken<ExtraActions> = string | CustomToken<ExtraActions>;
export interface CustomToken<ExtraActions> {
	v: string;
	s?: FontStyle[];
	onClick?: ChatiumActions<ExtraActions>;
}
export declare function Text<ExtraBlocks, ExtraActions>(props: TextProps<ExtraBlocks, ExtraActions>, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): Promise<TextBlock<ExtraBlocks, ExtraActions>>;
export interface HeaderProps<ExtraBlocks, ExtraActions> extends WithKey {
	blocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[];
	compact: boolean;
	logo?: {
		icon: Icon;
		onClick?: ChatiumActions<ExtraActions>;
		onContext?: ChatiumActions<ExtraActions>;
	};
	title?: TextBlock<ExtraBlocks, ExtraActions>;
	description?: TextBlock<ExtraBlocks, ExtraActions>;
	bottomGradientColors?: string[];
	topGradientColors?: string[];
	image?: {
		downloadUrl: string;
		imageSize: {
			width: number;
			height: number;
		};
	};
}
export interface HeaderBlock<ExtraBlocks, ExtraActions> extends HeaderProps<ExtraBlocks, ExtraActions> {
	type: "header";
}
export declare type HeaderFnProps<ExtraBlocks, ExtraActions> = Omit<HeaderProps<ExtraBlocks, ExtraActions>, "title" | "description"> & {
	title?: TextBlock<ExtraBlocks, ExtraActions> | Promise<TextBlock<ExtraBlocks, ExtraActions>>;
	description?: TextBlock<ExtraBlocks, ExtraActions> | Promise<TextBlock<ExtraBlocks, ExtraActions>>;
};
export declare function Header<ExtraBlocks, ExtraActions>(props: HeaderFnProps<ExtraBlocks, ExtraActions>, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): Promise<HeaderBlock<ExtraBlocks, ExtraActions>>;
export interface CardProps<ExtraActions> {
	id?: string;
	text?: string;
	imageUrl?: string;
	onClick?: ChatiumActions<ExtraActions>;
	onContext?: ChatiumActions<ExtraActions>;
	borderColor?: string;
	bgColor?: string;
	opacity?: number;
}
export interface HorizontalCardsProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	size: "small" | "medium" | "large";
	shape: "circle" | "square" | "rectangleHorizontal" | "rectangleVertical";
	textPosition: "none" | "insideBottom" | "outsideBottom";
	initialCardId?: string;
	cards: Array<CardProps<ExtraActions>>;
}
export interface HorizontalCardsBlock<ExtraBlocks, ExtraActions> extends HorizontalCardsProps<ExtraBlocks, ExtraActions> {
	type: "horizontalCards";
}
export declare function HorizontalCards<ExtraBlocks, ExtraActions>(props: HorizontalCardsProps<ExtraBlocks, ExtraActions>): HorizontalCardsBlock<ExtraBlocks, ExtraActions>;
export declare function Card<ExtraActions>(props: CardProps<ExtraActions>): CardProps<ExtraActions>;
export interface ImageProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	downloadUrl: string;
	onClick?: ChatiumActions<ExtraActions>;
	width?: number;
	height?: number;
	image?: any;
	resizeMode?: string;
	imageSize?: {
		width: number;
		height: number;
	};
}
export interface ImageBlock<ExtraBlocks, ExtraActions> extends ImageProps<ExtraBlocks, ExtraActions> {
	type: "image";
}
export declare function Image<ExtraBlocks, ExtraActions>(props: ImageProps<ExtraBlocks, ExtraActions>): ImageBlock<ExtraBlocks, ExtraActions>;
export interface ListItemProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	description?: string;
	imageSize?: ImageSize;
	logo?: Icon;
	onClick?: ChatiumActions<ExtraActions>;
	status?: StatusIcon;
	title: string;
	titleColor?: Color;
	updatedAtTimestamp?: number;
	unreadBullet?: boolean;
	active?: boolean;
	upTitle?: string;
	upTitleColor?: Color;
	url?: string;
}
export interface ListItemBlock<ExtraBlocks, ExtraActions> extends ListItemProps<ExtraBlocks, ExtraActions> {
	type: "screen";
}
export declare function ListItem<ExtraBlocks, ExtraActions>(props: ListItemProps<ExtraBlocks, ExtraActions>): ListItemBlock<ExtraBlocks, ExtraActions>;
export interface SearchProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	bgColor?: Color;
	borderColor?: Color;
	defaultValue?: string;
	delayMs?: number;
	fontColor?: Color;
	inputPlaceholder?: string;
	leftIcon?: Icon;
	minLength?: number;
	placeholderTextColor?: Color;
	queryParamKey: string;
	spinnerColor?: Color;
}
export interface SearchBlock<ExtraBlocks, ExtraActions> extends SearchProps<ExtraBlocks, ExtraActions> {
	type: "search";
}
export declare function Search<ExtraBlocks, ExtraActions>(props: SearchProps<ExtraBlocks, ExtraActions>): SearchBlock<ExtraBlocks, ExtraActions>;
export interface CommonVideoProps<ExtraBlocks, ExtraActions> extends CommonBlockProps<ExtraBlocks, ExtraActions> {
	hlsUrl?: string;
	imageUrl?: string;
	mp4Url?: string;
	videoAspectRatio?: [
		number,
		number
	];
}
export interface VideoProps<ExtraBlocks, ExtraActions> extends CommonVideoProps<ExtraBlocks, ExtraActions> {
	url?: string;
	file?: {
		hash: string;
	};
}
export interface VideoBlock<ExtraBlocks, ExtraActions> extends VideoProps<ExtraBlocks, ExtraActions> {
	type: "video";
}
export declare function Video<ExtraBlocks, ExtraActions>(props: VideoProps<ExtraBlocks, ExtraActions>): VideoBlock<ExtraBlocks, ExtraActions>;
export interface InlineVideoProps<ExtraBlocks, ExtraActions> extends CommonVideoProps<ExtraBlocks, ExtraActions> {
	ignoreSilentSwitch?: "ignore" | "obey";
	muted?: boolean;
	onProgressChange?: ProgressChangeProps<ExtraActions>[];
	overlay?: OverlayProps<ExtraBlocks, ExtraActions>;
	onVideoEnd?: ChatiumActions<ExtraActions>;
	paused?: boolean;
	playInBackground?: boolean;
	playWhenInactive?: boolean;
	repeat?: boolean;
	resizeMode?: "contain" | "cover" | "stretch";
	showControls?: "full" | "compact" | "mini" | "none";
	showTimer?: boolean;
	url: string;
	videoSize?: VideoSize;
}
export interface ProgressChangeProps<ExtraActions> {
	cond: string;
	action: ChatiumActions<ExtraActions>;
}
export interface VideoSize {
	width: number;
	height: number;
}
export interface InlineVideoBlock<ExtraBlocks, ExtraActions> extends InlineVideoProps<ExtraBlocks, ExtraActions> {
	type: "inlineVideo";
}
export declare function InlineVideo<ExtraBlocks, ExtraActions>(props: InlineVideoProps<ExtraBlocks, ExtraActions>): InlineVideoBlock<ExtraBlocks, ExtraActions>;
export declare type ChatiumBlock<ExtraBlocks, ExtraActions> = AudioBlock<ExtraBlocks, ExtraActions> | ButtonBlock<ExtraBlocks, ExtraActions> | FooterBlock<ExtraBlocks, ExtraActions> | GalleryBlock<ExtraBlocks, ExtraActions> | HeaderBlock<ExtraBlocks, ExtraActions> | HorizontalCardsBlock<ExtraBlocks, ExtraActions> | ImageBlock<ExtraBlocks, ExtraActions> | InlineVideoBlock<ExtraBlocks, ExtraActions> | ListItemBlock<ExtraBlocks, ExtraActions> | SearchBlock<ExtraBlocks, ExtraActions> | TextBlock<ExtraBlocks, ExtraActions> | VideoBlock<ExtraBlocks, ExtraActions> | ExtraBlocks;
export interface CommonBlockProps<ExtraBlocks, ExtraActions> extends WithKey {
	containerStyle?: ContainerStyle | null;
	fallback?: ChatiumBlock<ExtraBlocks, ExtraActions>;
	onContext?: ChatiumActions<ExtraActions>;
}
export interface WithKey {
	/**
	 * Helps client-side rendering optimization
	 * Auto-generated using consistent compact algorithm, but can be provided by developer manually
	 * When provided by developer manually, should be unique only on local level
	 *  and is augmented/modified automatically to be unique on screen level
	 */
	key?: ChatiumJsonKey;
	/**
	 * The main meaning is block unique ID
	 * This is also translated to client-side key of component, but is slightly different than key itself:
	 *  1) It's not auto-generated
	 *  2) Is passed without any modifications, uniqueness must be provided by the developer
	 *  3) Due to (2) can be used for actions that require some manipulations pointing to the exact block
	 */
	id?: ChatiumJsonId;
}
export declare type ChatiumJsonId = string;
export declare type ChatiumJsonKey = string | number;
export interface TextStyleInterface {
	color?: Color;
	fontSize?: number;
	lineHeight?: number;
}
export declare type Color = string;
export declare type FontSize = "mini" | "small" | "medium" | "large" | "xlarge" | "xxlarge" | "xxxlarge";
export declare type FontStyle = FontSize | "bold" | "semibold" | "italic" | "underlined" | "link" | "muted" | "warning" | TextStyleInterface;
export interface Icon {
	appIcon?: string;
	iconCssClass?: string;
	bgColor?: Color;
	color?: Color;
	image?: string;
	imageSize?: ImageSize;
	shape?: "circle" | "square";
	text?: string | number;
}
export interface StatusIcon extends Icon {
	isAvailable: boolean;
}
export interface Author<ExtraActions> {
	id: string;
	name: string;
	avatar: Icon;
	onClick?: ChatiumActions<ExtraActions>;
}
export declare type ImageSize = ImageSizePreset | number;
export declare type ImageSizePreset = "xxlarge" | "xlarge" | "large" | "medium" | "small";
export interface ContainerStyle {
	alignContent?: "flex-start" | "flex-end" | "center" | "stretch" | "space-between" | "space-around";
	alignItems?: FlexAlignType;
	alignSelf?: "auto" | FlexAlignType;
	bgColor?: Color;
	flexBasis?: number | string;
	flexGrow?: number;
	flexDirection?: "row" | "column" | "row-reverse" | "column-reverse";
	flexShrink?: number;
	flexWrap?: "wrap" | "nowrap" | "wrap-reverse";
	justifyContent?: "flex-start" | "flex-end" | "center" | "space-between" | "space-around" | "space-evenly";
	marginBottom?: number | string;
	marginLeft?: number | string;
	marginRight?: number | string;
	marginTop?: number | string;
	padding?: number | string;
	paddingBottom?: number | string;
	paddingLeft?: number | string;
	paddingRight?: number | string;
	paddingTop?: number | string;
	opacity?: number | string;
	borderRadius?: number;
	borderBottomLeftRadius?: number;
	borderBottomRightRadius?: number;
	borderTopLeftRadius?: number;
	borderTopRightRadius?: number;
	borderColor?: Color;
	borderBottomColor?: Color;
	borderLeftColor?: Color;
	borderRightColor?: Color;
	borderTopColor?: Color;
	borderWidth?: "hairline" | number;
	borderBottomWidth?: "hairline" | number;
	borderLeftWidth?: "hairline" | number;
	borderRightWidth?: "hairline" | number;
	borderTopWidth?: "hairline" | number;
	borderStyle?: "solid" | "dotted" | "dashed";
	position?: "absolute" | "relative";
	bottom?: number | string;
	left?: number | string;
	right?: number | string;
	top?: number | string;
	height?: number | string;
	width?: number | string;
}
export declare type FlexAlignType = "flex-start" | "flex-end" | "center" | "stretch" | "baseline";
export interface OverlayProps<ExtraBlocks, ExtraActions> {
	id?: ChatiumJsonId;
	gradientColors?: string[];
	blocks: ChatiumBlock<ExtraBlocks, ExtraActions>[];
	containerStyle?: ContainerStyle;
}
export interface NextSlideAction {
	type: "gallery:nextSlide";
	galleryId: string;
}
/**
 * Will not work if the gallery block is not given explicit id
 * @param galleryId - `id` property (blockId) of the target gallery block
 */
export declare function nextSlide(galleryId: ChatiumJsonId): NextSlideAction;
export interface NoopAction {
	type: "noop";
}
export declare function noop(): NoopAction;
export interface PreloadMediaAction {
	type: "preloadMedia";
	media: string[];
}
export declare function preloadMedia(media: string[]): PreloadMediaAction;
export interface RefreshAction {
	type: "refresh";
}
export declare function refresh(): RefreshAction;
export declare type RequestPaymentIntegration = "cloudpayments" | "yandexkassa" | "qiwip2p";
export interface RequestPaymentAction {
	type: "requestPayment";
	token: string;
	amount: number;
	description: string;
	integration: RequestPaymentIntegration;
	payload: object;
}
export declare function requestPayment(token: string, amount: number, description: string, integration: RequestPaymentIntegration, payload: object): Promise<RequestPaymentAction>;
export declare function humanizePaymentIntegration(integration: RequestPaymentIntegration): string;
export interface ResetSearchAction {
	type: "resetSearch";
}
export declare function resetSearch(): ResetSearchAction;
export interface SelectContactsAction {
	type: "selectContacts";
	url: string;
}
export declare function selectContacts(url: string): SelectContactsAction;
export interface SelectContactsContact {
	recordID: string;
	phoneNumber: {
		label: string;
		number: string;
	};
	familyName: string;
	givenName: string;
	middleName: string;
}
export interface ShowContextMenuAction<ExtraActions> {
	type: "showContextMenu";
	title?: string;
	menu: ContextMenuItem<ExtraActions>[];
}
export interface ContextMenuItem<ExtraActions = {}> {
	title: string;
	onClick: ChatiumActions<ExtraActions>;
}
export declare type ContextMenuValidArg<ExtraActions = {}> = ContextMenuItem<ExtraActions> | null | undefined | false;
export declare function showContextMenu<ExtraActions>(menu: ContextMenuValidArg<ExtraActions>[]): ShowContextMenuAction<ExtraActions>;
export interface ShowDialogCommon {
	type: "showDialog";
	title?: string;
	description?: string;
	submitUrl: string;
	submitData?: Record<string, unknown>;
	submitButtonTitle?: string;
	cancelButtonTitle?: string;
}
export interface ShowTextDialogAction extends ShowDialogCommon {
	inputType: "text" | "code";
	placeholder?: string;
	multiline?: boolean;
	value?: string;
}
export declare function showTextDialog(options: Omit<ShowTextDialogAction, "type" | "inputType">): ShowTextDialogAction;
export interface ShowToastAction {
	type: "showToast";
	toast: string;
}
export declare function showToast(toast: string): ShowToastAction;
export interface UpdateCurrentScreenBlock<P = unknown> {
	type: "updateCurrentScreenBlock";
	blockId: ChatiumJsonId;
	merge?: boolean;
	update: P;
}
export declare function updateCurrentScreenBlock<P>(blockId: string, update: P, merge?: boolean): UpdateCurrentScreenBlock<P>;
/**
 * @tparam ExtraActions - allows to expand list of supported actions for the library users
 */
export declare type ChatiumAction<ExtraActions = {}> = ApiCallAction | AttachMediaAction | ConfirmPhoneAction | ConfirmEmailAction | CopyToClipboardAction | GoBackAction | NavigateAction | NextSlideAction | NoopAction | PreloadMediaAction | RefreshAction | RequestPaymentAction | ResetSearchAction | SelectContactsAction | ShowContextMenuAction<ExtraActions> | ShowTextDialogAction | ShowToastAction | UpdateCurrentScreenBlock | ExtraActions;
export declare type ChatiumActions<ExtraActions = {}> = ChatiumAction<ExtraActions> | ChatiumAction<ExtraActions>[];
export interface ChatProps<ExtraActions> {
	messages_get_url: string;
	messages_add_url?: string;
	messages_edit_url: string;
	messages_delete_url: string;
	messages_changes_url: string;
	messages_react_url: string;
	mark_as_read_url?: string;
	last_read_get_url?: string;
	last_message_id: string | null;
	last_read_message_id: string | null;
	support_paging: boolean;
	files_put_url: string;
	reply_quotes_enabled: boolean;
	current_author: Author<ExtraActions> | null;
	group_author: Author<ExtraActions> | null;
	messages_socket_id: string;
	reactions_socket_id: string;
	last_read_at: number | null;
	last_read_socket_id: string;
	typing_socket_data?: {
		id: string;
		name: string;
		uid: string;
	};
	pinned?: {
		message?: ChatMessage<ExtraActions>;
		update_url?: string;
	};
	render_inverted?: boolean;
	on_context_api_call_url?: string;
}
export interface ChatMessage<ExtraActions> {
	id: string;
	text: string | null;
	canEdit: boolean;
	bgColor: string | null;
	author: Author<ExtraActions>;
	isOutgoing: boolean;
	files: Array<ChatiumFileInfo>;
	replyTo: ChatReplyMessage<ExtraActions> | null;
	createdAt: number;
	updatedAt: number;
	createdAtTimestamp: number;
}
export declare type ChatReplyMessage<ExtraActions> = Pick<ChatMessage<ExtraActions>, "id" | "text" | "files" | "author">;
export interface ChatiumFileInfo {
	url: string;
	hash: string;
	mime_type: string;
	thumbnail_url_400?: string;
	thumbnail_url_50?: string;
	meta?: {
		mime?: string;
		size?: number;
		width?: number;
		height?: number;
	};
}
export interface ChatiumScreen<ExtraBlocks, ExtraActions> {
	title: string;
	description?: string;
	backUrl?: string;
	header?: HeaderProps<ExtraBlocks, ExtraActions>;
	headerButton?: HeaderButton<ExtraBlocks, ExtraActions>;
	headerLeftButton?: HeaderButton<ExtraBlocks, ExtraActions>;
	contextLinks?: ContextLink<ExtraActions>[];
	socketId?: string;
	socketIds?: string[];
	blocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[];
	dropdownMenuBlocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[];
	dropdownMenuInitiallyVisible?: boolean;
	pinnedBlocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[];
	chat?: ChatProps<ExtraActions>;
	fullScreenGallery?: GalleryProps<ExtraBlocks, ExtraActions>;
	footer?: FooterProps<ExtraBlocks, ExtraActions>;
	search?: SearchProps<ExtraBlocks, ExtraActions>;
	needEmailCheck?: boolean;
	needPhoneCheck?: boolean;
	scrollTo?: string;
	logo?: Icon;
	layout?: "mobile" | "desktop";
	bgColor?: string;
}
export declare type HeaderButton<ExtraBlocks, ExtraActions> = Pick<ButtonProps<ExtraBlocks, ExtraActions>, "icon" | "onClick">;
export interface ContextLink<ExtraActions> {
	title: string;
	icon?: Icon;
	action: ChatiumActions<ExtraActions>;
}
export declare type ScreenProps<ExtraBlocks, ExtraActions> = Omit<ChatiumScreen<ExtraBlocks, ExtraActions>, "blocks" | "search" | "headerButton" | "pinnedBlocks" | "backUrl"> & {
	headerButton?: HeaderButton<ExtraBlocks, ExtraActions> | Promise<HeaderButton<ExtraBlocks, ExtraActions>>;
	pinnedBlocks?: ChatiumBlock<ExtraBlocks, ExtraActions>[] | Promise<ChatiumBlock<ExtraBlocks, ExtraActions>[]>;
	backUrl?: string | Promise<string>;
};
/**
 * Chatium-json screen constructor.
 * Supports Promises and arrays recursive flattening of the given children
 *  and special handling of search block
 */
export declare function Screen<ExtraBlocks, ExtraActions>(props: ScreenProps<ExtraBlocks, ExtraActions>, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): Promise<ChatiumScreen<ExtraBlocks, ExtraActions>>;
/**
 * Standard response type for standard chatium calls including screen, apiCall action and simple data requests
 */
export declare type ChatiumResponse<ExtraBlocks, ExtraActions> = ChatiumSuccessResponse<ExtraBlocks, ExtraActions> | ErrorResponse<ExtraBlocks, ExtraActions>;
export declare type ChatiumSuccessResponse<ExtraBlocks, ExtraActions> = {
	success: true;
} & (ScreenResponse<ExtraBlocks, ExtraActions> | ApiCallResponse<ExtraBlocks, ExtraActions> | DataResponse);
export declare type ErrorResponse<ExtraBlocks, ExtraActions> = ScreenErrorResponse<ExtraBlocks, ExtraActions> | ApiCallErrorResponse<ExtraBlocks, ExtraActions> | DataErrorResponse;
/**
 * Standard response for apiCall client action
 */
export interface ApiCallResponse<ExtraBlocks, ExtraActions> {
	appAction?: ChatiumActions<ExtraActions>;
	appScreens?: Record<string, ChatiumScreen<ExtraBlocks, ExtraActions>>;
}
/**
 * Standard plain data response (whole payload should be put in `data` field)
 */
export interface DataResponse {
	data: unknown;
}
/**
 * Standard get-screen response
 */
export interface ScreenResponse<ExtraBlocks, ExtraActions> {
	data: ChatiumScreen<ExtraBlocks, ExtraActions>;
	appScreens?: Record<string, ChatiumScreen<ExtraBlocks, ExtraActions>>;
	preloadMedia?: string[];
}
/**
 * Standard error shape
 * Can be extended depending on request type, see below
 */
export interface ChatiumErrorResponse extends ChatiumErrorFields {
	success: false;
}
export interface ChatiumErrorFields {
	errorType?: string;
	statusCode: number;
	reason: string;
	[key: string]: unknown;
}
export interface ScreenErrorResponse<ExtraBlocks, ExtraActions> extends ChatiumErrorResponse, Partial<ScreenResponse<ExtraBlocks, ExtraActions>> {
}
export interface ApiCallErrorResponse<ExtraBlocks, ExtraActions> extends ChatiumErrorResponse, ApiCallResponse<ExtraBlocks, ExtraActions> {
}
export interface DataErrorResponse extends ChatiumErrorResponse, Partial<DataResponse> {
}
export declare function isChatiumErrorResponse(val: any): val is ChatiumErrorResponse;
export declare function screenResponse<ExtraBlocks, ExtraActions>(props: ScreenResponse<ExtraBlocks, ExtraActions>): {
	data: ChatiumScreen<ExtraBlocks, ExtraActions>;
	appScreens?: Record<string, ChatiumScreen<ExtraBlocks, ExtraActions>> | undefined;
	preloadMedia?: string[] | undefined;
	success: boolean;
};
export declare function apiCallResponse<ExtraBlocks, ExtraActions>(props: ApiCallResponse<ExtraBlocks, ExtraActions>): {
	appAction?: AttachMediaAction | ConfirmEmailAction | ConfirmPhoneAction | CopyToClipboardAction | GoBackAction | NavigateAction | ApiCallAction<unknown> | NextSlideAction | NoopAction | PreloadMediaAction | RefreshAction | RequestPaymentAction | ResetSearchAction | SelectContactsAction | ShowTextDialogAction | ShowToastAction | UpdateCurrentScreenBlock<unknown> | ExtraActions | ShowContextMenuAction<ExtraActions> | ChatiumAction<ExtraActions>[] | undefined;
	appScreens?: Record<string, ChatiumScreen<ExtraBlocks, ExtraActions>> | undefined;
	success: boolean;
};
/**
 * Creates a jsx-factory function for the given intrinsic chatium blocks
 */
export declare function jsxFactory<IE extends Record<string, object>, K extends keyof IE, ExtraBlocks, ExtraActions>(intrinsicBlocks: Record<K, BlockFactory<ExtraBlocks, ExtraActions, IE[K]>>): <P>(block: K | BlockFactory<ExtraBlocks, ExtraActions, P>, props: IE[K] | P, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]) => JsxNode<ExtraBlocks, ExtraActions>;
/**
 * Custom JSX factory for the chatium-json blocks.
 * In tsconfig.json
 *   "jsx": "react",
 *   "jsxFactory": "jsx",
 *
 * Usage in screen-source:
 *  import { jsx } from '@chatium/json'
 */
export declare const jsx: <P>(block: string | BlockFactory<unknown, unknown, P>, props: object | P, ...children: unknown[]) => unknown;
export interface BlockFactory<ExtraBlocks, ExtraActions, P = {}> {
	(props: P, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): JsxNode<ExtraBlocks, ExtraActions>;
}
export declare type JsxNode<ExtraBlocks, ExtraActions> = ChatiumChildNode<ExtraBlocks, ExtraActions> | ChatiumChildNode<ExtraBlocks, ExtraActions>[] | Promise<ChatiumScreen<ExtraBlocks, ExtraActions>>;
declare function Fragment<ExtraBlocks, ExtraActions>(_props?: {}, ...children: ChatiumChildNode<ExtraBlocks, ExtraActions>[]): ChatiumChildNode<ExtraBlocks, ExtraActions>[];
/**
 * JSX Intrinsic elements support for chatium blocks.
 * To enable jsx typings:
 * ```
 * declare global {
 *   namespace JSX {
 *     interface IntrinsicElements extends ChatiumIntrinsicElements<never> {
 *       // here may be some additional elements declarations
 *     }
 *   }
 * }
 * ```
 */
export interface ChatiumIntrinsicElements<ExtraBlocks, ExtraActions> {
	audio: AudioProps<ExtraBlocks, ExtraActions>;
	button: ButtonProps<ExtraBlocks, ExtraActions>;
	f: {};
	footer: FooterProps<ExtraBlocks, ExtraActions>;
	gallery: GalleryProps<ExtraBlocks, ExtraActions>;
	header: HeaderProps<ExtraBlocks, ExtraActions>;
	image: ImageProps<ExtraBlocks, ExtraActions>;
	"list-item": ListItemProps<ExtraBlocks, ExtraActions>;
	"horizontal-cards": HorizontalCardsProps<ExtraBlocks, ExtraActions>;
	screen: ScreenProps<ExtraBlocks, ExtraActions>;
	search: SearchProps<ExtraBlocks, ExtraActions>;
	text: TextProps<ExtraBlocks, ExtraActions>;
	video: VideoProps<ExtraBlocks, ExtraActions>;
}
export declare const intrinsicBlocks: {
	audio: typeof Audio;
	button: typeof Button;
	f: typeof Fragment;
	footer: typeof Footer;
	gallery: typeof Gallery;
	header: typeof Header;
	"horizontal-cards": typeof HorizontalCards;
	image: typeof Image;
	"list-item": typeof ListItem;
	screen: typeof Screen;
	search: typeof Search;
	text: typeof Text;
	video: typeof Video;
};

export {};
